#pragma once

#ifndef GLAPIENTRY
#ifdef Q_OS_MAC
#define GLAPIENTRY
#else
#define GLAPIENTRY __stdcall
#endif
#endif

// clang-format off
void GLAPIENTRY qt_glViewport(GLint x, GLint y, GLsizei width, GLsizei height);
void GLAPIENTRY qt_glDepthRange(GLdouble nearVal, GLdouble farVal);
GLboolean GLAPIENTRY qt_glIsEnabled(GLenum cap);
void GLAPIENTRY qt_glGetTexLevelParameteriv(GLenum target, GLint level, GLenum pname, GLint *params);
void GLAPIENTRY qt_glGetTexLevelParameterfv(GLenum target, GLint level, GLenum pname, GLfloat *params);
void GLAPIENTRY qt_glGetTexParameteriv(GLenum target, GLenum pname, GLint *params);
void GLAPIENTRY qt_glGetTexParameterfv(GLenum target, GLenum pname, GLfloat *params);
void GLAPIENTRY qt_glGetTexImage(GLenum target, GLint level, GLenum format, GLenum type, GLvoid *pixels);
const GLubyte * GLAPIENTRY qt_glGetString(GLenum name);
void GLAPIENTRY qt_glGetIntegerv(GLenum pname, GLint *params);
void GLAPIENTRY qt_glGetFloatv(GLenum pname, GLfloat *params);
GLenum GLAPIENTRY qt_glGetError();
void GLAPIENTRY qt_glGetDoublev(GLenum pname, GLdouble *params);
void GLAPIENTRY qt_glGetBooleanv(GLenum pname, GLboolean *params);
void GLAPIENTRY qt_glReadPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLvoid *pixels);
void GLAPIENTRY qt_glReadBuffer(GLenum mode);
void GLAPIENTRY qt_glPixelStorei(GLenum pname, GLint param);
void GLAPIENTRY qt_glPixelStoref(GLenum pname, GLfloat param);
void GLAPIENTRY qt_glDepthFunc(GLenum func);
void GLAPIENTRY qt_glStencilOp(GLenum fail, GLenum zfail, GLenum zpass);
void GLAPIENTRY qt_glStencilFunc(GLenum func, GLint ref, GLuint mask);
void GLAPIENTRY qt_glLogicOp(GLenum opcode);
void GLAPIENTRY qt_glBlendFunc(GLenum sfactor, GLenum dfactor);
void GLAPIENTRY qt_glFlush();
void GLAPIENTRY qt_glFinish();
void GLAPIENTRY qt_glEnable(GLenum cap);
void GLAPIENTRY qt_glDisable(GLenum cap);
void GLAPIENTRY qt_glDepthMask(GLboolean flag);
void GLAPIENTRY qt_glColorMask(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha);
void GLAPIENTRY qt_glStencilMask(GLuint mask);
void GLAPIENTRY qt_glClearDepth(GLdouble depth);
void GLAPIENTRY qt_glClearStencil(GLint s);
void GLAPIENTRY qt_glClearColor(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
void GLAPIENTRY qt_glClear(GLbitfield mask);
void GLAPIENTRY qt_glDrawBuffer(GLenum mode);
void GLAPIENTRY qt_glTexImage2D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid *pixels);
void GLAPIENTRY qt_glTexImage1D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid *pixels);
void GLAPIENTRY qt_glTexParameteriv(GLenum target, GLenum pname, const GLint *params);
void GLAPIENTRY qt_glTexParameteri(GLenum target, GLenum pname, GLint param);
void GLAPIENTRY qt_glTexParameterfv(GLenum target, GLenum pname, const GLfloat *params);
void GLAPIENTRY qt_glTexParameterf(GLenum target, GLenum pname, GLfloat param);
void GLAPIENTRY qt_glScissor(GLint x, GLint y, GLsizei width, GLsizei height);
void GLAPIENTRY qt_glPolygonMode(GLenum face, GLenum mode);
void GLAPIENTRY qt_glPointSize(GLfloat size);
void GLAPIENTRY qt_glLineWidth(GLfloat width);
void GLAPIENTRY qt_glHint(GLenum target, GLenum mode);
void GLAPIENTRY qt_glFrontFace(GLenum mode);
void GLAPIENTRY qt_glCullFace(GLenum mode);
void GLAPIENTRY qt_glIndexubv(const GLubyte *c);
void GLAPIENTRY qt_glIndexub(GLubyte c);
GLboolean GLAPIENTRY qt_glIsTexture(GLuint texture);
void GLAPIENTRY qt_glGenTextures(GLsizei n, GLuint *textures);
void GLAPIENTRY qt_glDeleteTextures(GLsizei n, const GLuint *textures);
void GLAPIENTRY qt_glBindTexture(GLenum target, GLuint texture);
void GLAPIENTRY qt_glTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels);
void GLAPIENTRY qt_glTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid *pixels);
void GLAPIENTRY qt_glCopyTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
void GLAPIENTRY qt_glCopyTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
void GLAPIENTRY qt_glCopyTexImage2D(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
void GLAPIENTRY qt_glCopyTexImage1D(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border);
void GLAPIENTRY qt_glPolygonOffset(GLfloat factor, GLfloat units);
void GLAPIENTRY qt_glGetPointerv(GLenum pname, GLvoid* *params);
void GLAPIENTRY qt_glDrawElements(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices);
void GLAPIENTRY qt_glDrawArrays(GLenum mode, GLint first, GLsizei count);
void GLAPIENTRY qt_glCopyTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
void GLAPIENTRY qt_glTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *pixels);
void GLAPIENTRY qt_glTexImage3D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid *pixels);
void GLAPIENTRY qt_glDrawRangeElements(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const GLvoid *indices);
void GLAPIENTRY qt_glBlendEquation(GLenum mode);
void GLAPIENTRY qt_glBlendColor(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
void GLAPIENTRY qt_glGetCompressedTexImage(GLenum target, GLint level, GLvoid *img);
void GLAPIENTRY qt_glCompressedTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid *data);
void GLAPIENTRY qt_glCompressedTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid *data);
void GLAPIENTRY qt_glCompressedTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid *data);
void GLAPIENTRY qt_glCompressedTexImage1D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid *data);
void GLAPIENTRY qt_glCompressedTexImage2D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid *data);
void GLAPIENTRY qt_glCompressedTexImage3D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid *data);
void GLAPIENTRY qt_glSampleCoverage(GLfloat value, GLboolean invert);
void GLAPIENTRY qt_glActiveTexture(GLenum texture);
void GLAPIENTRY qt_glPointParameteriv(GLenum pname, const GLint *params);
void GLAPIENTRY qt_glPointParameteri(GLenum pname, GLint param);
void GLAPIENTRY qt_glPointParameterfv(GLenum pname, const GLfloat *params);
void GLAPIENTRY qt_glPointParameterf(GLenum pname, GLfloat param);
void GLAPIENTRY qt_glMultiDrawElements(GLenum mode, const GLsizei *count, GLenum type, const GLvoid* const *indices, GLsizei drawcount);
void GLAPIENTRY qt_glMultiDrawArrays(GLenum mode, const GLint *first, const GLsizei *count, GLsizei drawcount);
void GLAPIENTRY qt_glBlendFuncSeparate(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);
void GLAPIENTRY qt_glGetBufferPointerv(GLenum target, GLenum pname, GLvoid* *params);
void GLAPIENTRY qt_glGetBufferParameteriv(GLenum target, GLenum pname, GLint *params);
GLboolean GLAPIENTRY qt_glUnmapBuffer(GLenum target);
GLvoid* GLAPIENTRY qt_glMapBuffer(GLenum target, GLenum access);
void GLAPIENTRY qt_glGetBufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, GLvoid *data);
void GLAPIENTRY qt_glBufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, const GLvoid *data);
void GLAPIENTRY qt_glBufferData(GLenum target, GLsizeiptr size, const GLvoid *data, GLenum usage);
GLboolean GLAPIENTRY qt_glIsBuffer(GLuint buffer);
void GLAPIENTRY qt_glGenBuffers(GLsizei n, GLuint *buffers);
void GLAPIENTRY qt_glDeleteBuffers(GLsizei n, const GLuint *buffers);
void GLAPIENTRY qt_glBindBuffer(GLenum target, GLuint buffer);
void GLAPIENTRY qt_glGetQueryObjectuiv(GLuint id, GLenum pname, GLuint *params);
void GLAPIENTRY qt_glGetQueryObjectiv(GLuint id, GLenum pname, GLint *params);
void GLAPIENTRY qt_glGetQueryiv(GLenum target, GLenum pname, GLint *params);
void GLAPIENTRY qt_glEndQuery(GLenum target);
void GLAPIENTRY qt_glBeginQuery(GLenum target, GLuint id);
GLboolean GLAPIENTRY qt_glIsQuery(GLuint id);
void GLAPIENTRY qt_glDeleteQueries(GLsizei n, const GLuint *ids);
void GLAPIENTRY qt_glGenQueries(GLsizei n, GLuint *ids);
void GLAPIENTRY qt_glVertexAttribPointer(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const GLvoid *pointer);
void GLAPIENTRY qt_glValidateProgram(GLuint program);
void GLAPIENTRY qt_glUniformMatrix4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
void GLAPIENTRY qt_glUniformMatrix3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
void GLAPIENTRY qt_glUniformMatrix2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
void GLAPIENTRY qt_glUniform4iv(GLint location, GLsizei count, const GLint *value);
void GLAPIENTRY qt_glUniform3iv(GLint location, GLsizei count, const GLint *value);
void GLAPIENTRY qt_glUniform2iv(GLint location, GLsizei count, const GLint *value);
void GLAPIENTRY qt_glUniform1iv(GLint location, GLsizei count, const GLint *value);
void GLAPIENTRY qt_glUniform4fv(GLint location, GLsizei count, const GLfloat *value);
void GLAPIENTRY qt_glUniform3fv(GLint location, GLsizei count, const GLfloat *value);
void GLAPIENTRY qt_glUniform2fv(GLint location, GLsizei count, const GLfloat *value);
void GLAPIENTRY qt_glUniform1fv(GLint location, GLsizei count, const GLfloat *value);
void GLAPIENTRY qt_glUniform4i(GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
void GLAPIENTRY qt_glUniform3i(GLint location, GLint v0, GLint v1, GLint v2);
void GLAPIENTRY qt_glUniform2i(GLint location, GLint v0, GLint v1);
void GLAPIENTRY qt_glUniform1i(GLint location, GLint v0);
void GLAPIENTRY qt_glUniform4f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
void GLAPIENTRY qt_glUniform3f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
void GLAPIENTRY qt_glUniform2f(GLint location, GLfloat v0, GLfloat v1);
void GLAPIENTRY qt_glUniform1f(GLint location, GLfloat v0);
void GLAPIENTRY qt_glUseProgram(GLuint program);
void GLAPIENTRY qt_glShaderSource(GLuint shader, GLsizei count, const GLchar* const *string, const GLint *length);
void GLAPIENTRY qt_glLinkProgram(GLuint program);
GLboolean GLAPIENTRY qt_glIsShader(GLuint shader);
GLboolean GLAPIENTRY qt_glIsProgram(GLuint program);
void GLAPIENTRY qt_glGetVertexAttribPointerv(GLuint index, GLenum pname, GLvoid* *pointer);
void GLAPIENTRY qt_glGetVertexAttribiv(GLuint index, GLenum pname, GLint *params);
void GLAPIENTRY qt_glGetVertexAttribfv(GLuint index, GLenum pname, GLfloat *params);
void GLAPIENTRY qt_glGetVertexAttribdv(GLuint index, GLenum pname, GLdouble *params);
void GLAPIENTRY qt_glGetUniformiv(GLuint program, GLint location, GLint *params);
void GLAPIENTRY qt_glGetUniformfv(GLuint program, GLint location, GLfloat *params);
GLint GLAPIENTRY qt_glGetUniformLocation(GLuint program, const GLchar *name);
void GLAPIENTRY qt_glGetShaderSource(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *source);
void GLAPIENTRY qt_glGetShaderInfoLog(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *infoLog);
void GLAPIENTRY qt_glGetShaderiv(GLuint shader, GLenum pname, GLint *params);
void GLAPIENTRY qt_glGetProgramInfoLog(GLuint program, GLsizei bufSize, GLsizei *length, GLchar *infoLog);
void GLAPIENTRY qt_glGetProgramiv(GLuint program, GLenum pname, GLint *params);
GLint GLAPIENTRY qt_glGetAttribLocation(GLuint program, const GLchar *name);
void GLAPIENTRY qt_glGetAttachedShaders(GLuint program, GLsizei maxCount, GLsizei *count, GLuint *obj);
void GLAPIENTRY qt_glGetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name);
void GLAPIENTRY qt_glGetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name);
void GLAPIENTRY qt_glEnableVertexAttribArray(GLuint index);
void GLAPIENTRY qt_glDisableVertexAttribArray(GLuint index);
void GLAPIENTRY qt_glDetachShader(GLuint program, GLuint shader);
void GLAPIENTRY qt_glDeleteShader(GLuint shader);
void GLAPIENTRY qt_glDeleteProgram(GLuint program);
GLuint GLAPIENTRY qt_glCreateShader(GLenum type);
GLuint GLAPIENTRY qt_glCreateProgram();
void GLAPIENTRY qt_glCompileShader(GLuint shader);
void GLAPIENTRY qt_glBindAttribLocation(GLuint program, GLuint index, const GLchar *name);
void GLAPIENTRY qt_glAttachShader(GLuint program, GLuint shader);
void GLAPIENTRY qt_glStencilMaskSeparate(GLenum face, GLuint mask);
void GLAPIENTRY qt_glStencilFuncSeparate(GLenum face, GLenum func, GLint ref, GLuint mask);
void GLAPIENTRY qt_glStencilOpSeparate(GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass);
void GLAPIENTRY qt_glDrawBuffers(GLsizei n, const GLenum *bufs);
void GLAPIENTRY qt_glBlendEquationSeparate(GLenum modeRGB, GLenum modeAlpha);
void GLAPIENTRY qt_glUniformMatrix4x3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
void GLAPIENTRY qt_glUniformMatrix3x4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
void GLAPIENTRY qt_glUniformMatrix4x2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
void GLAPIENTRY qt_glUniformMatrix2x4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
void GLAPIENTRY qt_glUniformMatrix3x2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
void GLAPIENTRY qt_glUniformMatrix2x3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
GLboolean GLAPIENTRY qt_glIsVertexArray(GLuint array);
void GLAPIENTRY qt_glGenVertexArrays(GLsizei n, GLuint *arrays);
void GLAPIENTRY qt_glDeleteVertexArrays(GLsizei n, const GLuint *arrays);
void GLAPIENTRY qt_glBindVertexArray(GLuint array);
void GLAPIENTRY qt_glFlushMappedBufferRange(GLenum target, GLintptr offset, GLsizeiptr length);
GLvoid* GLAPIENTRY qt_glMapBufferRange(GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access);
void GLAPIENTRY qt_glFramebufferTextureLayer(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer);
void GLAPIENTRY qt_glRenderbufferStorageMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
void GLAPIENTRY qt_glBlitFramebuffer(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
void GLAPIENTRY qt_glGenerateMipmap(GLenum target);
void GLAPIENTRY qt_glGetFramebufferAttachmentParameteriv(GLenum target, GLenum attachment, GLenum pname, GLint *params);
void GLAPIENTRY qt_glFramebufferRenderbuffer(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
void GLAPIENTRY qt_glFramebufferTexture3D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset);
void GLAPIENTRY qt_glFramebufferTexture2D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
void GLAPIENTRY qt_glFramebufferTexture1D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
GLenum GLAPIENTRY qt_glCheckFramebufferStatus(GLenum target);
void GLAPIENTRY qt_glGenFramebuffers(GLsizei n, GLuint *framebuffers);
void GLAPIENTRY qt_glDeleteFramebuffers(GLsizei n, const GLuint *framebuffers);
void GLAPIENTRY qt_glBindFramebuffer(GLenum target, GLuint framebuffer);
GLboolean GLAPIENTRY qt_glIsFramebuffer(GLuint framebuffer);
void GLAPIENTRY qt_glGetRenderbufferParameteriv(GLenum target, GLenum pname, GLint *params);
void GLAPIENTRY qt_glRenderbufferStorage(GLenum target, GLenum internalformat, GLsizei width, GLsizei height);
void GLAPIENTRY qt_glGenRenderbuffers(GLsizei n, GLuint *renderbuffers);
void GLAPIENTRY qt_glDeleteRenderbuffers(GLsizei n, const GLuint *renderbuffers);
void GLAPIENTRY qt_glBindRenderbuffer(GLenum target, GLuint renderbuffer);
GLboolean GLAPIENTRY qt_glIsRenderbuffer(GLuint renderbuffer);
const GLubyte * GLAPIENTRY qt_glGetStringi(GLenum name, GLuint index);
void GLAPIENTRY qt_glClearBufferfi(GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil);
void GLAPIENTRY qt_glClearBufferfv(GLenum buffer, GLint drawbuffer, const GLfloat *value);
void GLAPIENTRY qt_glClearBufferuiv(GLenum buffer, GLint drawbuffer, const GLuint *value);
void GLAPIENTRY qt_glClearBufferiv(GLenum buffer, GLint drawbuffer, const GLint *value);
void GLAPIENTRY qt_glGetTexParameterIuiv(GLenum target, GLenum pname, GLuint *params);
void GLAPIENTRY qt_glGetTexParameterIiv(GLenum target, GLenum pname, GLint *params);
void GLAPIENTRY qt_glTexParameterIuiv(GLenum target, GLenum pname, const GLuint *params);
void GLAPIENTRY qt_glTexParameterIiv(GLenum target, GLenum pname, const GLint *params);
void GLAPIENTRY qt_glUniform4uiv(GLint location, GLsizei count, const GLuint *value);
void GLAPIENTRY qt_glUniform3uiv(GLint location, GLsizei count, const GLuint *value);
void GLAPIENTRY qt_glUniform2uiv(GLint location, GLsizei count, const GLuint *value);
void GLAPIENTRY qt_glUniform1uiv(GLint location, GLsizei count, const GLuint *value);
void GLAPIENTRY qt_glUniform4ui(GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
void GLAPIENTRY qt_glUniform3ui(GLint location, GLuint v0, GLuint v1, GLuint v2);
void GLAPIENTRY qt_glUniform2ui(GLint location, GLuint v0, GLuint v1);
void GLAPIENTRY qt_glUniform1ui(GLint location, GLuint v0);
GLint GLAPIENTRY qt_glGetFragDataLocation(GLuint program, const GLchar *name);
void GLAPIENTRY qt_glBindFragDataLocation(GLuint program, GLuint color, const GLchar *name);
void GLAPIENTRY qt_glGetUniformuiv(GLuint program, GLint location, GLuint *params);
void GLAPIENTRY qt_glGetVertexAttribIuiv(GLuint index, GLenum pname, GLuint *params);
void GLAPIENTRY qt_glGetVertexAttribIiv(GLuint index, GLenum pname, GLint *params);
void GLAPIENTRY qt_glVertexAttribIPointer(GLuint index, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);
void GLAPIENTRY qt_glEndConditionalRender();
void GLAPIENTRY qt_glBeginConditionalRender(GLuint id, GLenum mode);
void GLAPIENTRY qt_glClampColor(GLenum target, GLenum clamp);
void GLAPIENTRY qt_glGetTransformFeedbackVarying(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name);
void GLAPIENTRY qt_glTransformFeedbackVaryings(GLuint program, GLsizei count, const GLchar* const *varyings, GLenum bufferMode);
void GLAPIENTRY qt_glBindBufferBase(GLenum target, GLuint index, GLuint buffer);
void GLAPIENTRY qt_glBindBufferRange(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);
void GLAPIENTRY qt_glEndTransformFeedback();
void GLAPIENTRY qt_glBeginTransformFeedback(GLenum primitiveMode);
GLboolean GLAPIENTRY qt_glIsEnabledi(GLenum target, GLuint index);
void GLAPIENTRY qt_glDisablei(GLenum target, GLuint index);
void GLAPIENTRY qt_glEnablei(GLenum target, GLuint index);
void GLAPIENTRY qt_glGetIntegeri_v(GLenum target, GLuint index, GLint *data);
void GLAPIENTRY qt_glGetBooleani_v(GLenum target, GLuint index, GLboolean *data);
void GLAPIENTRY qt_glColorMaski(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a);
void GLAPIENTRY qt_glCopyBufferSubData(GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);
void GLAPIENTRY qt_glUniformBlockBinding(GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding);
void GLAPIENTRY qt_glGetActiveUniformBlockName(GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformBlockName);
void GLAPIENTRY qt_glGetActiveUniformBlockiv(GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint *params);
GLuint GLAPIENTRY qt_glGetUniformBlockIndex(GLuint program, const GLchar *uniformBlockName);
void GLAPIENTRY qt_glGetActiveUniformName(GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformName);
void GLAPIENTRY qt_glGetActiveUniformsiv(GLuint program, GLsizei uniformCount, const GLuint *uniformIndices, GLenum pname, GLint *params);
void GLAPIENTRY qt_glGetUniformIndices(GLuint program, GLsizei uniformCount, const GLchar* const *uniformNames, GLuint *uniformIndices);
void GLAPIENTRY qt_glPrimitiveRestartIndex(GLuint index);
void GLAPIENTRY qt_glTexBuffer(GLenum target, GLenum internalformat, GLuint buffer);
void GLAPIENTRY qt_glDrawElementsInstanced(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei instancecount);
void GLAPIENTRY qt_glDrawArraysInstanced(GLenum mode, GLint first, GLsizei count, GLsizei instancecount);
void GLAPIENTRY qt_glSampleMaski(GLuint index, GLbitfield mask);
void GLAPIENTRY qt_glGetMultisamplefv(GLenum pname, GLuint index, GLfloat *val);
void GLAPIENTRY qt_glTexImage3DMultisample(GLenum target, GLsizei samples, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
void GLAPIENTRY qt_glTexImage2DMultisample(GLenum target, GLsizei samples, GLint internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
void GLAPIENTRY qt_glGetSynciv(GLsync sync, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *values);
void GLAPIENTRY qt_glGetInteger64v(GLenum pname, GLint64 *params);
void GLAPIENTRY qt_glWaitSync(GLsync sync, GLbitfield flags, GLuint64 timeout);
GLenum GLAPIENTRY qt_glClientWaitSync(GLsync sync, GLbitfield flags, GLuint64 timeout);
void GLAPIENTRY qt_glDeleteSync(GLsync sync);
GLboolean GLAPIENTRY qt_glIsSync(GLsync sync);
GLsync GLAPIENTRY qt_glFenceSync(GLenum condition, GLbitfield flags);
void GLAPIENTRY qt_glProvokingVertex(GLenum mode);
void GLAPIENTRY qt_glMultiDrawElementsBaseVertex(GLenum mode, const GLsizei *count, GLenum type, const GLvoid* const *indices, GLsizei drawcount, const GLint *basevertex);
void GLAPIENTRY qt_glDrawElementsInstancedBaseVertex(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei instancecount, GLint basevertex);
void GLAPIENTRY qt_glDrawRangeElementsBaseVertex(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const GLvoid *indices, GLint basevertex);
void GLAPIENTRY qt_glDrawElementsBaseVertex(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLint basevertex);
void GLAPIENTRY qt_glFramebufferTexture(GLenum target, GLenum attachment, GLuint texture, GLint level);
void GLAPIENTRY qt_glGetBufferParameteri64v(GLenum target, GLenum pname, GLint64 *params);
void GLAPIENTRY qt_glGetInteger64i_v(GLenum target, GLuint index, GLint64 *data);
void GLAPIENTRY qt_glVertexAttribP4uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint *value);
void GLAPIENTRY qt_glVertexAttribP4ui(GLuint index, GLenum type, GLboolean normalized, GLuint value);
void GLAPIENTRY qt_glVertexAttribP3uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint *value);
void GLAPIENTRY qt_glVertexAttribP3ui(GLuint index, GLenum type, GLboolean normalized, GLuint value);
void GLAPIENTRY qt_glVertexAttribP2uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint *value);
void GLAPIENTRY qt_glVertexAttribP2ui(GLuint index, GLenum type, GLboolean normalized, GLuint value);
void GLAPIENTRY qt_glVertexAttribP1uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint *value);
void GLAPIENTRY qt_glVertexAttribP1ui(GLuint index, GLenum type, GLboolean normalized, GLuint value);
void GLAPIENTRY qt_glSecondaryColorP3uiv(GLenum type, const GLuint *color);
void GLAPIENTRY qt_glSecondaryColorP3ui(GLenum type, GLuint color);
void GLAPIENTRY qt_glColorP4uiv(GLenum type, const GLuint *color);
void GLAPIENTRY qt_glColorP4ui(GLenum type, GLuint color);
void GLAPIENTRY qt_glColorP3uiv(GLenum type, const GLuint *color);
void GLAPIENTRY qt_glColorP3ui(GLenum type, GLuint color);
void GLAPIENTRY qt_glNormalP3uiv(GLenum type, const GLuint *coords);
void GLAPIENTRY qt_glNormalP3ui(GLenum type, GLuint coords);
void GLAPIENTRY qt_glMultiTexCoordP4uiv(GLenum texture, GLenum type, const GLuint *coords);
void GLAPIENTRY qt_glMultiTexCoordP4ui(GLenum texture, GLenum type, GLuint coords);
void GLAPIENTRY qt_glMultiTexCoordP3uiv(GLenum texture, GLenum type, const GLuint *coords);
void GLAPIENTRY qt_glMultiTexCoordP3ui(GLenum texture, GLenum type, GLuint coords);
void GLAPIENTRY qt_glMultiTexCoordP2uiv(GLenum texture, GLenum type, const GLuint *coords);
void GLAPIENTRY qt_glMultiTexCoordP2ui(GLenum texture, GLenum type, GLuint coords);
void GLAPIENTRY qt_glMultiTexCoordP1uiv(GLenum texture, GLenum type, const GLuint *coords);
void GLAPIENTRY qt_glMultiTexCoordP1ui(GLenum texture, GLenum type, GLuint coords);
void GLAPIENTRY qt_glTexCoordP4uiv(GLenum type, const GLuint *coords);
void GLAPIENTRY qt_glTexCoordP4ui(GLenum type, GLuint coords);
void GLAPIENTRY qt_glTexCoordP3uiv(GLenum type, const GLuint *coords);
void GLAPIENTRY qt_glTexCoordP3ui(GLenum type, GLuint coords);
void GLAPIENTRY qt_glTexCoordP2uiv(GLenum type, const GLuint *coords);
void GLAPIENTRY qt_glTexCoordP2ui(GLenum type, GLuint coords);
void GLAPIENTRY qt_glTexCoordP1uiv(GLenum type, const GLuint *coords);
void GLAPIENTRY qt_glTexCoordP1ui(GLenum type, GLuint coords);
void GLAPIENTRY qt_glVertexP4uiv(GLenum type, const GLuint *value);
void GLAPIENTRY qt_glVertexP4ui(GLenum type, GLuint value);
void GLAPIENTRY qt_glVertexP3uiv(GLenum type, const GLuint *value);
void GLAPIENTRY qt_glVertexP3ui(GLenum type, GLuint value);
void GLAPIENTRY qt_glVertexP2uiv(GLenum type, const GLuint *value);
void GLAPIENTRY qt_glVertexP2ui(GLenum type, GLuint value);
void GLAPIENTRY qt_glGetQueryObjectui64v(GLuint id, GLenum pname, GLuint64 *params);
void GLAPIENTRY qt_glGetQueryObjecti64v(GLuint id, GLenum pname, GLint64 *params);
void GLAPIENTRY qt_glQueryCounter(GLuint id, GLenum target);
void GLAPIENTRY qt_glGetSamplerParameterIuiv(GLuint sampler, GLenum pname, GLuint *params);
void GLAPIENTRY qt_glGetSamplerParameterfv(GLuint sampler, GLenum pname, GLfloat *params);
void GLAPIENTRY qt_glGetSamplerParameterIiv(GLuint sampler, GLenum pname, GLint *params);
void GLAPIENTRY qt_glGetSamplerParameteriv(GLuint sampler, GLenum pname, GLint *params);
void GLAPIENTRY qt_glSamplerParameterIuiv(GLuint sampler, GLenum pname, const GLuint *param);
void GLAPIENTRY qt_glSamplerParameterIiv(GLuint sampler, GLenum pname, const GLint *param);
void GLAPIENTRY qt_glSamplerParameterfv(GLuint sampler, GLenum pname, const GLfloat *param);
void GLAPIENTRY qt_glSamplerParameterf(GLuint sampler, GLenum pname, GLfloat param);
void GLAPIENTRY qt_glSamplerParameteriv(GLuint sampler, GLenum pname, const GLint *param);
void GLAPIENTRY qt_glSamplerParameteri(GLuint sampler, GLenum pname, GLint param);
void GLAPIENTRY qt_glBindSampler(GLuint unit, GLuint sampler);
GLboolean GLAPIENTRY qt_glIsSampler(GLuint sampler);
void GLAPIENTRY qt_glDeleteSamplers(GLsizei count, const GLuint *samplers);
void GLAPIENTRY qt_glGenSamplers(GLsizei count, GLuint *samplers);
GLint GLAPIENTRY qt_glGetFragDataIndex(GLuint program, const GLchar *name);
void GLAPIENTRY qt_glBindFragDataLocationIndexed(GLuint program, GLuint colorNumber, GLuint index, const GLchar *name);
void GLAPIENTRY qt_glVertexAttribDivisor(GLuint index, GLuint divisor);
// clang-format on
